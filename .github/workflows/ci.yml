# .github/workflows/ci.yml

name: CI

on:
  # Push events - only on main branch or version tags
  push:
    branches: [main]
    tags: ["v*"]
  # Pull requests - only when targeting main branch
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  # Manual trigger
  workflow_dispatch:

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Single test job using Nix flake
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    # Skip CI on merge commits to main if PR was already tested
    if: |
      github.event_name != 'push' || 
      !contains(github.event.head_commit.message, 'Merge pull request')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      
      - name: Build flake
        run: |
          nix flake check --accept-flake-config
          nix develop -c echo "Development environment ready"
      
      - name: Format check
        run: nix develop --command format --check
      
      - name: Lint
        run: nix develop --command lint
      
      - name: Type check
        run: nix develop --command typecheck
      
      - name: Run all tests
        run: |
          nix develop --command setup
          nix develop --command run-tests -- -m "not anthropic" --cov=mcp_nixos --cov-report=xml --junitxml=junit.xml
      
      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./junit.xml

  # Complexity analysis for PRs only
  analyze:
    name: Code Complexity
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Setup and analyze
        run: |
          nix develop --command setup
          nix develop --command bash -c 'source .venv/bin/activate && pip install wily'
          nix develop --command bash -c 'source .venv/bin/activate && wily build mcp_nixos tests'
          
          mkdir -p complexity-report
          nix develop --command bash -c 'source .venv/bin/activate && wily diff mcp_nixos tests -r origin/${{ github.event.pull_request.base.ref }}' > complexity-report/diff.txt || true
      
      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report/

  # Website deployment - only on main branch pushes with changes
  deploy-website:
    name: Deploy Website
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      !startsWith(github.event.head_commit.message, 'Merge pull request')
    environment:
      name: AWS
      url: https://mcp-nixos.utensils.io
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for website changes
        id: changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^website/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No website changes - skipping deployment"
          fi
      
      - name: Setup Node.js
        if: steps.changes.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: website/package-lock.json
      
      - name: Build and Deploy
        if: steps.changes.outputs.changed == 'true'
        run: |
          cd website
          npm install
          npm run build
        
      - name: Configure AWS credentials
        if: steps.changes.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to S3
        if: steps.changes.outputs.changed == 'true'
        run: |
          aws s3 sync website/out/ s3://urandom-mcp-nixos/ --delete
          aws cloudfront create-invalidation --distribution-id E1QS1G7FYYJ6TL --paths "/*"

  # PyPI publishing - only on version tags
  publish:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-nixos
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Build package
        run: |
          nix develop --command build
          ls -l dist/
      
      - name: Verify package
        run: |
          python3 -m venv test-env
          source test-env/bin/activate
          pip install dist/*.whl
          python -c "import mcp_nixos; print(f'Version: {mcp_nixos.__version__}')"
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1