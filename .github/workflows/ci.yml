# .github/workflows/ci.yml
#
# CI/CD workflow with smart test execution:
# - Repository members: Run all tests including eval tests
# - External contributors: Skip eval tests to prevent API credit abuse
# - Local development: Always runs all tests
# - Skips tests for documentation-only changes
# - Handles releases via PR labels to avoid duplicate runs

name: CI

on:
  # Push events - only on main branch or version tags
  push:
    branches: [main]
    tags: ["v*"]
  # Pull requests - only when targeting main branch
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, labeled]
  # Manual trigger
  workflow_dispatch:

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Detect what changed to determine if we need to run tests
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
      website: ${{ steps.filter.outputs.website }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'mcp_nixos/**'
              - 'tests/**'
              - 'pyproject.toml'
              - 'setup.py'
              - 'requirements.txt'
              - 'flake.nix'
              - 'flake.lock'
              - '.github/workflows/**'
            docs:
              - '*.md'
              - 'LICENSE'
              - '.env.example'
            website:
              - 'website/**'

  # Single test job using Nix flake
  test:
    name: Test & Lint
    needs: changes
    runs-on: ubuntu-latest
    # Skip tests if only docs changed, or on merge commits that were already tested
    if: |
      needs.changes.outputs.code == 'true' &&
      (github.event_name != 'push' || 
       !contains(github.event.head_commit.message, 'Merge pull request'))
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      
      - name: Build flake
        run: |
          nix flake check --accept-flake-config
          nix develop -c echo "Development environment ready"
      
      - name: Format check
        run: nix develop --command format --check
      
      - name: Lint
        run: nix develop --command lint
      
      - name: Type check
        run: nix develop --command typecheck
      
      - name: Check if contributor is a repo member
        id: check_member
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Check if the PR author is a member of the repository
              const { data: membership } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.pull_request.user.login
              });
              
              // Members have 'write' or 'admin' permission
              const isMember = ['write', 'admin'].includes(membership.permission);
              core.setOutput('is_member', isMember.toString());
              
              console.log(`PR author ${context.payload.pull_request.user.login} is ${isMember ? 'a' : 'not a'} repo member`);
            } catch (error) {
              // If we can't determine membership, assume they're not a member
              console.log('Could not determine membership status:', error.message);
              core.setOutput('is_member', 'false');
            }
      
      - name: Run tests (repo members - includes eval tests)
        if: |
          github.event_name != 'pull_request' || 
          steps.check_member.outputs.is_member == 'true'
        run: |
          echo "Running all tests including eval tests (repo member or direct push)"
          nix develop --command setup
          nix develop --command bash -c 'run-tests'
      
      - name: Run tests (external contributors - excludes eval tests)
        if: |
          github.event_name == 'pull_request' && 
          steps.check_member.outputs.is_member != 'true'
        run: |
          echo "Running tests excluding eval tests (external contributor)"
          nix develop --command setup
          nix develop --command bash -c 'run-tests -m "not anthropic"'
      
      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./junit.xml

  # Complexity analysis for PRs only
  analyze:
    name: Code Complexity
    needs: changes
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Setup and analyze
        run: |
          nix develop --command setup
          nix develop --command bash -c 'source .venv/bin/activate && pip install wily'
          nix develop --command bash -c 'source .venv/bin/activate && wily build mcp_nixos tests'
          
          mkdir -p complexity-report
          nix develop --command bash -c 'source .venv/bin/activate && wily diff mcp_nixos tests -r origin/${{ github.event.pull_request.base.ref }}' > complexity-report/diff.txt || true
      
      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report/

  # Website deployment - only on main branch pushes with changes
  deploy-website:
    name: Deploy Website
    needs: changes
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      needs.changes.outputs.website == 'true' &&
      !startsWith(github.event.head_commit.message, 'Merge pull request')
    environment:
      name: AWS
      url: https://mcp-nixos.utensils.io
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: website/package-lock.json
      
      - name: Build and Deploy
        run: |
          cd website
          npm install
          npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to S3
        run: |
          aws s3 sync website/out/ s3://urandom-mcp-nixos/ --delete
          aws cloudfront create-invalidation --distribution-id E1QS1G7FYYJ6TL --paths "/*"

  # Create GitHub Release when PR with release label is merged
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      contains(github.event.head_commit.message, 'release:')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from commit message
        id: extract_version
        run: |
          # Extract version from commit message like "release: v1.0.0"
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release:\s*v?\K[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [ -z "$VERSION" ]; then
            echo "No version found in commit message"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create and push tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ steps.extract_version.outputs.tag }} -m "Release ${{ steps.extract_version.outputs.tag }}"
          git push origin ${{ steps.extract_version.outputs.tag }}
      
      - name: Extract release notes
        id: extract_notes
        run: |
          # Extract release notes for this version from RELEASE_NOTES.md
          awk '/^# MCP-NixOS: v${{ steps.extract_version.outputs.version }}/ {flag=1; next} /^# MCP-NixOS: v[0-9]/ {if(flag) exit} flag' RELEASE_NOTES.md > release_notes.txt
          echo "Release notes extracted"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.tag }}
          release_name: Release ${{ steps.extract_version.outputs.tag }}
          body_path: release_notes.txt
          draft: false
          prerelease: false

  # PyPI publishing - only on version tags
  publish:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-nixos
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Build package
        run: |
          nix develop --command build
          ls -l dist/
      
      - name: Verify package
        run: |
          python3 -m venv test-env
          source test-env/bin/activate
          pip install dist/*.whl
          python -c "import mcp_nixos; print(f'Version: {mcp_nixos.__version__}')"
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1